
GUID is better for DD. Btter perhaps is int id + GUID.
Ardalis' Guard methods.
Entitie's main resposibility=identity and life cycle. Entity's class should only retain entity. Others should go somewhere else.
Entity-->BaseEntity<TId> (Id is Guid or int, Events of the Entities-List<BaseDomainEvent>)
RoomId {get; private set}

Appointment entity has UpdateRoom and Schedule methods.

In the Scheduling BC. Doctor has only Name and int id property/ Fpr thos BC. Doctor is mpt very important and readonly like Room.
Doctor: BaseEntity<int>, IAggregatRoot
Synced Aggegates. Clinic BC updates doctor and publishes this. Sch BC is notified and syncs its doctor! Different DB's is not a big problem!


Anemic Domain model (state maintenance, good for CRUD) X Rich (behaviours as well, good for DDD). Not just state.

Entity= A mutable class with an identity (not tied to its property values) used for tracking and persistence.
Reference entity: Used entities.

Message queues are one way to share data accrosss BCs.

VOs: defined by only attributes. Measures, quantifies or describes a thing in the domain. Vos identity = composition of values. so they should be immutable!
Comparions is via the values of them. May have methods (compuite things but should not change any state) and bhvrs but no side effects!


VOs and Ents are typically classes. dont confuse with Value-reference type distinction in OOP.

Strings are most commonly used VOs.Money also. Dates are perfect examples. 
---Company---
Id
Worth--->Unit + Amount

---DateTimeRange---

Appointment-->DatetimeRange with private setters. 

Try to use VOs instead of Ents wherever possible! Even Ents should be designed as value containers as much as possible.
Guess first that a concept is a VO. If not it is Ent.
Even identities can be VOs. Look At ClientId! 
AnimalType, DateTime Range are also VOs.

Evans: VOs are good to put some logic. Because they do not involve identity and side effects. You can put pure reaosning there.

ValueObject base classs: equality comparer.
VO's state should be determined only by constructors.
Moving logic out from  into value objects: Entity becomes a glue, orchestator! Testing VOs and putting logic into them is much easier! But Ents can have also some concise logic.
Primitives should be groupeds as VOs as much as possible.
Generally uses ad a property of an ent.

-----DOMAIN SERVICES------
An oprtn is important to the model but not belong to any object or VO, it is time for DSs.
DS =Ent1-Ent2-Ent3...>Result
Has an intf defined in terms of other domai model elements.
Stateless but may have side effects (state changes on the app OR interaction with the outisde world(DB, API etc.)).
Lives in the core of the app.
Examples from diff layers:
UI and App: msgsending, msg processing, XML parsing, UI services
Domain: Orchestrating workflows, Transfer between Accounts, Process Order, etc.
Infrastructure: Send Email, Log to a file.
SEs: Query ops should be seperate from updating states.



----AGGREGATES And Agg Roots----
Without Aggs, the data models is a big ball of mud!
Agg= combonation of entities that co-change!
- Customer-Address (1-1)-Address is part of Customer. AggRoot=Parent Objet= Customer
- Product-Component (1-N)- Component is part of a Product. AggRoot=Parent Objet= Product
- Aggs can have only 1 entity like Customer. Agg=AggRoot.
Aggs may have some logic. Components in a prod for example may be arranges or have some rules (i.e. invariants, like at least 2 Xs, 3 Ys) to build a product properly.
Changes to the Agg should be via a single Transaction and follow ACID (Atomic, Consistent, isolated, durable).
Evans: Agg= a cluster of associated objects that we treat as a unit for the purpose of data changes.
--Relationship (Assosiation) types--
-Bi-directional often makes thinbg overly complex. Evans: both entities can be understood only together.
-DDD suggests use unidirectioanl rels by default.
How to decide: Ask yourseld whether neither of the ents can be defines without the other. Can we deine a client without identifying their pets? Can we deine a pet without identifying their owners?
why would a client call a vet if she has no pet! Also a pet should have a client! 
In the context of Sch appointments, a client would need a patient. Traversing from the pet to client does not seem necessary to create an appointment. Bu still pet may have a clientid (Not the whole client objct) for some cases.
Bidirectional rels may cause serialziation to fail!
External obejcts should interact with only the agg root not the dependents.
Order should not access directy to the customer's address.
Aggs and AggRooots only apply to objects not to data model.
ORM takeway: Client-->Patients, but Patient should have only ClientId.
AggRoot is resposible for the rules in aggregate.
Invariant= A condition that should always be true for the system to be consistent.
Cross-aggegate invariants should not be enforced by any one agg.
Check points for an Agg Root:
1-Enforces invariants.
2-Saving changes can save entire aggregates.
3-Deleting the entity should delete all the other associations (Cascading delete).
Use collections's AsReadOnly() method in the nav prop.



--Agg Tips--
-Aggs are not always the answer!
-they can connect only by the root.
-Dont overlook using FKs for non-root entities.
-Too many Fks to non-root entities may sugegst a problem
-Aggegates of one are acceptable.
-Rule of cascading deletes.

----Repositories---
Used to acccess entities and aggregates
Business objects have no logic related to how data is stored and retrieved.
Benefits:
1-Provides common abstraction to persistence
2-SOP
3-Communicates design decisions
4-Enables testability
5-Easier to maintain

Repository Tips:
-Reps should provide an illusion of collections
-Implement a known, common access interface
-They can have specific-to-context methods like GetClientByIdWithPatients. But be careful. There might be many such methods. So we should Speecifications
-Use reps for only agg roots
-Client focuses on model, rep on persistence

Avoiding Rep Blunders
--N+1 Query Errors: To display some rows of X from the DB, calling a list of all Xs and then retrieve the ones needed based on the main list (you first do a query to get a list of records, then subsequently do another query for each of those records.). For example, you get first the list of category ids and use those ids to fetch items matching with each category id. Here N=count of items, and 1=query for the categories.
--Inappropriate use of eager or lazy loading, which is risky to use.
--Fetching more data than required.

Use DB Profilers or .Net logging API or 3rd party profilers to avoid these blunders.

---Common arguments about Repos---
-- Ef Core alreadyt has a repo:DbContext. So two opinions: Never or always Use a repo with EF Core: Repos are abstractions defined in the model.
Repos are persistence abss. abs defiens what needs to do. Implementatinos define how it is done. EF Core is easily used by implementation classes.
--Returning IQueryables: should repos return IQueryables?
You can add expression to Queryables but EF does not guarantee that it will be properly or translated at all into SQL language. 
We caa have flebilities by passing predicats to the querying method.

---Generic Repos and interfaces---
perfect fir Reusing!
Generic constraints can protect aggs.
One tradeoff: not all generic methods should be used. Soem of htme should not be used!
Repo abss might ne too large vilating ISP.
Split them into two: Query Repos + Command Repos=>Command Query Resposibility Seperation.
Too many read methods can interfere with Cache logic. Every new method requires new caching data.
Marker Interfacases (e.h. IAggregateRoots) are empty interfaces used just as a constraint. Used in DDD to limit the access a repo only to Agg Root classes.
But fortuantely we have specification pattern. 
Specifications + repos = Clean, testable and extensible design.
Specs speicifies the state of an object.
3 ways to use them: Validation, Selection/Querying and Cretirion for a speicif purpose.
They are value objects. A psec is a predicate that determiens if an object satifieis a criterion.
Criteria evlatuad in memory. But we can use specs with DBContext as well.
UIse Ardalis Specifications Nuget library.
Spec benefits:  Named clases via Ubiquitous language, reusable, seperate persistance from Domain model and UI, Help entities and aggss follow SRP.
Each spec is a value object.
Specs not only define predicates but also includes (EF) and projections (field selection).
EF now supports filtered includes.

---------domain events and Anti-corruption layers (translator btw bounded contexts and Legacy APIs)---
DE: Alert that Important activities or state changes. Other domains can subscribe to these events. The ycan comminicate with the outside of the domain.
DEs encapsualted as objects. DEs are not delegates in the classical sense but classes!
DEs are messages indicating that something importsant has happened.
DEs represent the past thay are immutable.
BaseDE implementing a common interface like INotification or IDomainEvent can record thwn the event happened.
DEs should be lightweight with relevant IDs but not whole objects.

Hollywood principle: Don't call us, we'll call you!: Closer to DI pricinple. Evetns dont call the handlers, handlers call the events.
DEs and handlers should nerver fail!
Events can find and call handlers in a many ways. We can use MediatR Nuget package.

DEs workflow: Create intfs or base types for handler and Dom event-->Define events-->(Multiple) Define associated handlers-->Register each even object into the list of events of the relevant class.
After saving the entity, for each domain event registered, we call mediatr.publish.
Look at DomainEvents github repo. Or use CleanArchitecture repo which has this architecture already.


DEs vs Integration events (between different Apps, services, BCs)
IEs are richer with real info rather than IDs.


----Anti Corruption Layers---
Uses adapters and/or facades.

---Message Queues---
RabbitMQ (0 instasllation with pre-built docker container)
PaperCut-SMTp emulate email sending

---Microservices---
Should be self-contained,  no dependency in other mss, independently deployable, changing internal bhhs of a ms should not break communications


YOU SHOULD NOT IGNORE UI. YOU SHOULD THINK ABOUT IT AS WELL WHEN YOU MODEL THE DOMAIN.





































































































